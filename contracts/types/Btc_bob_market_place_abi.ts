/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace BtcBobMarketPlace {
  export type BitcoinAddressStruct = { scriptPubKey: BytesLike };

  export type BitcoinAddressStructOutput = [string] & { scriptPubKey: string };

  export type OrdinalIdStruct = { txId: BytesLike; index: BigNumberish };

  export type OrdinalIdStructOutput = [string, number] & {
    txId: string;
    index: number;
  };
}

export declare namespace BitcoinTx {
  export type InfoStruct = {
    version: BytesLike;
    inputVector: BytesLike;
    outputVector: BytesLike;
    locktime: BytesLike;
  };

  export type InfoStructOutput = [string, string, string, string] & {
    version: string;
    inputVector: string;
    outputVector: string;
    locktime: string;
  };

  export type ProofStruct = {
    merkleProof: BytesLike;
    txIndexInBlock: BigNumberish;
    bitcoinHeaders: BytesLike;
  };

  export type ProofStructOutput = [string, BigNumber, string] & {
    merkleProof: string;
    txIndexInBlock: BigNumber;
    bitcoinHeaders: string;
  };

  export type UTXOStruct = {
    txHash: BytesLike;
    txOutputIndex: BigNumberish;
    txOutputValue: BigNumberish;
  };

  export type UTXOStructOutput = [string, number, BigNumber] & {
    txHash: string;
    txOutputIndex: number;
    txOutputValue: BigNumber;
  };
}

export interface Btc_bob_market_place_abiInterface extends utils.Interface {
  functions: {
    "acceptBtcSellOrder(uint256,(bytes))": FunctionFragment;
    "acceptOrdinalSellOrder(uint256,(bytes))": FunctionFragment;
    "btcSellOrders(uint256)": FunctionFragment;
    "completeBtcSellOrder(uint256,(bytes4,bytes,bytes,bytes4),(bytes,uint256,bytes))": FunctionFragment;
    "completeOrdinalSellOrder(uint256,(bytes4,bytes,bytes,bytes4),(bytes,uint256,bytes))": FunctionFragment;
    "ordinalSellOrders(uint256)": FunctionFragment;
    "placeBtcSellOrder(uint256,address,uint256)": FunctionFragment;
    "placeOrdinalSellOrder((bytes32,uint32),(bytes32,uint32,uint64),uint256,address)": FunctionFragment;
    "usdcContractAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptBtcSellOrder"
      | "acceptOrdinalSellOrder"
      | "btcSellOrders"
      | "completeBtcSellOrder"
      | "completeOrdinalSellOrder"
      | "ordinalSellOrders"
      | "placeBtcSellOrder"
      | "placeOrdinalSellOrder"
      | "usdcContractAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptBtcSellOrder",
    values: [BigNumberish, BtcBobMarketPlace.BitcoinAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOrdinalSellOrder",
    values: [BigNumberish, BtcBobMarketPlace.BitcoinAddressStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "btcSellOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeBtcSellOrder",
    values: [BigNumberish, BitcoinTx.InfoStruct, BitcoinTx.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "completeOrdinalSellOrder",
    values: [BigNumberish, BitcoinTx.InfoStruct, BitcoinTx.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ordinalSellOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBtcSellOrder",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeOrdinalSellOrder",
    values: [
      BtcBobMarketPlace.OrdinalIdStruct,
      BitcoinTx.UTXOStruct,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "usdcContractAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBtcSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOrdinalSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "btcSellOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeBtcSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOrdinalSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ordinalSellOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeBtcSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeOrdinalSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcContractAddress",
    data: BytesLike
  ): Result;

  events: {
    "btcSellOrderBtcSellOrderAccepted(uint256,(bytes))": EventFragment;
    "btcSellOrderSuccessfullyPlaced(uint256,uint256,address,uint256)": EventFragment;
    "btcSuccessfullySendtoDestination(uint256)": EventFragment;
    "ordinalSellOrderBtcSellOrderAccepted(uint256,(bytes))": EventFragment;
    "ordinalSellOrderSuccessfullyPlaced(uint256,(bytes32,uint32),uint256,address)": EventFragment;
    "ordinalSuccessfullySendtoDestination(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "btcSellOrderBtcSellOrderAccepted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "btcSellOrderSuccessfullyPlaced"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "btcSuccessfullySendtoDestination"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ordinalSellOrderBtcSellOrderAccepted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ordinalSellOrderSuccessfullyPlaced"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ordinalSuccessfullySendtoDestination"
  ): EventFragment;
}

export interface btcSellOrderBtcSellOrderAcceptedEventObject {
  id: BigNumber;
  bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStructOutput;
}
export type btcSellOrderBtcSellOrderAcceptedEvent = TypedEvent<
  [BigNumber, BtcBobMarketPlace.BitcoinAddressStructOutput],
  btcSellOrderBtcSellOrderAcceptedEventObject
>;

export type btcSellOrderBtcSellOrderAcceptedEventFilter =
  TypedEventFilter<btcSellOrderBtcSellOrderAcceptedEvent>;

export interface btcSellOrderSuccessfullyPlacedEventObject {
  orderId: BigNumber;
  sellAmountBtc: BigNumber;
  buyingToken: string;
  buyAmount: BigNumber;
}
export type btcSellOrderSuccessfullyPlacedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  btcSellOrderSuccessfullyPlacedEventObject
>;

export type btcSellOrderSuccessfullyPlacedEventFilter =
  TypedEventFilter<btcSellOrderSuccessfullyPlacedEvent>;

export interface btcSuccessfullySendtoDestinationEventObject {
  id: BigNumber;
}
export type btcSuccessfullySendtoDestinationEvent = TypedEvent<
  [BigNumber],
  btcSuccessfullySendtoDestinationEventObject
>;

export type btcSuccessfullySendtoDestinationEventFilter =
  TypedEventFilter<btcSuccessfullySendtoDestinationEvent>;

export interface ordinalSellOrderBtcSellOrderAcceptedEventObject {
  id: BigNumber;
  bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStructOutput;
}
export type ordinalSellOrderBtcSellOrderAcceptedEvent = TypedEvent<
  [BigNumber, BtcBobMarketPlace.BitcoinAddressStructOutput],
  ordinalSellOrderBtcSellOrderAcceptedEventObject
>;

export type ordinalSellOrderBtcSellOrderAcceptedEventFilter =
  TypedEventFilter<ordinalSellOrderBtcSellOrderAcceptedEvent>;

export interface ordinalSellOrderSuccessfullyPlacedEventObject {
  id: BigNumber;
  ordinalID: BtcBobMarketPlace.OrdinalIdStructOutput;
  buyAmount: BigNumber;
  buyingToken: string;
}
export type ordinalSellOrderSuccessfullyPlacedEvent = TypedEvent<
  [BigNumber, BtcBobMarketPlace.OrdinalIdStructOutput, BigNumber, string],
  ordinalSellOrderSuccessfullyPlacedEventObject
>;

export type ordinalSellOrderSuccessfullyPlacedEventFilter =
  TypedEventFilter<ordinalSellOrderSuccessfullyPlacedEvent>;

export interface ordinalSuccessfullySendtoDestinationEventObject {
  id: BigNumber;
}
export type ordinalSuccessfullySendtoDestinationEvent = TypedEvent<
  [BigNumber],
  ordinalSuccessfullySendtoDestinationEventObject
>;

export type ordinalSuccessfullySendtoDestinationEventFilter =
  TypedEventFilter<ordinalSuccessfullySendtoDestinationEvent>;

export interface Btc_bob_market_place_abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Btc_bob_market_place_abiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptBtcSellOrder(
      id: BigNumberish,
      bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    acceptOrdinalSellOrder(
      id: BigNumberish,
      bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    btcSellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BtcBobMarketPlace.BitcoinAddressStructOutput,
        boolean
      ] & {
        sellAmountBtc: BigNumber;
        askingToken: string;
        buyAmount: BigNumber;
        btcSeller: string;
        btcBuyer: BtcBobMarketPlace.BitcoinAddressStructOutput;
        isOrderAccepted: boolean;
      }
    >;

    completeBtcSellOrder(
      id: BigNumberish,
      transaction: BitcoinTx.InfoStruct,
      proof: BitcoinTx.ProofStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    completeOrdinalSellOrder(
      id: BigNumberish,
      transaction: BitcoinTx.InfoStruct,
      proof: BitcoinTx.ProofStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ordinalSellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BtcBobMarketPlace.OrdinalIdStructOutput,
        BigNumber,
        string,
        BitcoinTx.UTXOStructOutput,
        string,
        BtcBobMarketPlace.BitcoinAddressStructOutput,
        boolean
      ] & {
        ordinalID: BtcBobMarketPlace.OrdinalIdStructOutput;
        buyAmount: BigNumber;
        askingToken: string;
        utxo: BitcoinTx.UTXOStructOutput;
        ordinalSeller: string;
        ordinalBuyer: BtcBobMarketPlace.BitcoinAddressStructOutput;
        isOrderAccepted: boolean;
      }
    >;

    placeBtcSellOrder(
      sellAmountBtc: BigNumberish,
      buyingToken: string,
      buyAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    placeOrdinalSellOrder(
      ordinalID: BtcBobMarketPlace.OrdinalIdStruct,
      utxo: BitcoinTx.UTXOStruct,
      buyAmount: BigNumberish,
      buyToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    usdcContractAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptBtcSellOrder(
    id: BigNumberish,
    bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  acceptOrdinalSellOrder(
    id: BigNumberish,
    bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  btcSellOrders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      string,
      BtcBobMarketPlace.BitcoinAddressStructOutput,
      boolean
    ] & {
      sellAmountBtc: BigNumber;
      askingToken: string;
      buyAmount: BigNumber;
      btcSeller: string;
      btcBuyer: BtcBobMarketPlace.BitcoinAddressStructOutput;
      isOrderAccepted: boolean;
    }
  >;

  completeBtcSellOrder(
    id: BigNumberish,
    transaction: BitcoinTx.InfoStruct,
    proof: BitcoinTx.ProofStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  completeOrdinalSellOrder(
    id: BigNumberish,
    transaction: BitcoinTx.InfoStruct,
    proof: BitcoinTx.ProofStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ordinalSellOrders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BtcBobMarketPlace.OrdinalIdStructOutput,
      BigNumber,
      string,
      BitcoinTx.UTXOStructOutput,
      string,
      BtcBobMarketPlace.BitcoinAddressStructOutput,
      boolean
    ] & {
      ordinalID: BtcBobMarketPlace.OrdinalIdStructOutput;
      buyAmount: BigNumber;
      askingToken: string;
      utxo: BitcoinTx.UTXOStructOutput;
      ordinalSeller: string;
      ordinalBuyer: BtcBobMarketPlace.BitcoinAddressStructOutput;
      isOrderAccepted: boolean;
    }
  >;

  placeBtcSellOrder(
    sellAmountBtc: BigNumberish,
    buyingToken: string,
    buyAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  placeOrdinalSellOrder(
    ordinalID: BtcBobMarketPlace.OrdinalIdStruct,
    utxo: BitcoinTx.UTXOStruct,
    buyAmount: BigNumberish,
    buyToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  usdcContractAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptBtcSellOrder(
      id: BigNumberish,
      bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOrdinalSellOrder(
      id: BigNumberish,
      bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    btcSellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        string,
        BtcBobMarketPlace.BitcoinAddressStructOutput,
        boolean
      ] & {
        sellAmountBtc: BigNumber;
        askingToken: string;
        buyAmount: BigNumber;
        btcSeller: string;
        btcBuyer: BtcBobMarketPlace.BitcoinAddressStructOutput;
        isOrderAccepted: boolean;
      }
    >;

    completeBtcSellOrder(
      id: BigNumberish,
      transaction: BitcoinTx.InfoStruct,
      proof: BitcoinTx.ProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    completeOrdinalSellOrder(
      id: BigNumberish,
      transaction: BitcoinTx.InfoStruct,
      proof: BitcoinTx.ProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ordinalSellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BtcBobMarketPlace.OrdinalIdStructOutput,
        BigNumber,
        string,
        BitcoinTx.UTXOStructOutput,
        string,
        BtcBobMarketPlace.BitcoinAddressStructOutput,
        boolean
      ] & {
        ordinalID: BtcBobMarketPlace.OrdinalIdStructOutput;
        buyAmount: BigNumber;
        askingToken: string;
        utxo: BitcoinTx.UTXOStructOutput;
        ordinalSeller: string;
        ordinalBuyer: BtcBobMarketPlace.BitcoinAddressStructOutput;
        isOrderAccepted: boolean;
      }
    >;

    placeBtcSellOrder(
      sellAmountBtc: BigNumberish,
      buyingToken: string,
      buyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeOrdinalSellOrder(
      ordinalID: BtcBobMarketPlace.OrdinalIdStruct,
      utxo: BitcoinTx.UTXOStruct,
      buyAmount: BigNumberish,
      buyToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcContractAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "btcSellOrderBtcSellOrderAccepted(uint256,(bytes))"(
      id?: BigNumberish | null,
      bitcoinAddress?: null
    ): btcSellOrderBtcSellOrderAcceptedEventFilter;
    btcSellOrderBtcSellOrderAccepted(
      id?: BigNumberish | null,
      bitcoinAddress?: null
    ): btcSellOrderBtcSellOrderAcceptedEventFilter;

    "btcSellOrderSuccessfullyPlaced(uint256,uint256,address,uint256)"(
      orderId?: BigNumberish | null,
      sellAmountBtc?: null,
      buyingToken?: null,
      buyAmount?: null
    ): btcSellOrderSuccessfullyPlacedEventFilter;
    btcSellOrderSuccessfullyPlaced(
      orderId?: BigNumberish | null,
      sellAmountBtc?: null,
      buyingToken?: null,
      buyAmount?: null
    ): btcSellOrderSuccessfullyPlacedEventFilter;

    "btcSuccessfullySendtoDestination(uint256)"(
      id?: null
    ): btcSuccessfullySendtoDestinationEventFilter;
    btcSuccessfullySendtoDestination(
      id?: null
    ): btcSuccessfullySendtoDestinationEventFilter;

    "ordinalSellOrderBtcSellOrderAccepted(uint256,(bytes))"(
      id?: BigNumberish | null,
      bitcoinAddress?: null
    ): ordinalSellOrderBtcSellOrderAcceptedEventFilter;
    ordinalSellOrderBtcSellOrderAccepted(
      id?: BigNumberish | null,
      bitcoinAddress?: null
    ): ordinalSellOrderBtcSellOrderAcceptedEventFilter;

    "ordinalSellOrderSuccessfullyPlaced(uint256,(bytes32,uint32),uint256,address)"(
      id?: BigNumberish | null,
      ordinalID?: null,
      buyAmount?: null,
      buyingToken?: null
    ): ordinalSellOrderSuccessfullyPlacedEventFilter;
    ordinalSellOrderSuccessfullyPlaced(
      id?: BigNumberish | null,
      ordinalID?: null,
      buyAmount?: null,
      buyingToken?: null
    ): ordinalSellOrderSuccessfullyPlacedEventFilter;

    "ordinalSuccessfullySendtoDestination(uint256)"(
      id?: null
    ): ordinalSuccessfullySendtoDestinationEventFilter;
    ordinalSuccessfullySendtoDestination(
      id?: null
    ): ordinalSuccessfullySendtoDestinationEventFilter;
  };

  estimateGas: {
    acceptBtcSellOrder(
      id: BigNumberish,
      bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    acceptOrdinalSellOrder(
      id: BigNumberish,
      bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    btcSellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeBtcSellOrder(
      id: BigNumberish,
      transaction: BitcoinTx.InfoStruct,
      proof: BitcoinTx.ProofStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    completeOrdinalSellOrder(
      id: BigNumberish,
      transaction: BitcoinTx.InfoStruct,
      proof: BitcoinTx.ProofStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ordinalSellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeBtcSellOrder(
      sellAmountBtc: BigNumberish,
      buyingToken: string,
      buyAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    placeOrdinalSellOrder(
      ordinalID: BtcBobMarketPlace.OrdinalIdStruct,
      utxo: BitcoinTx.UTXOStruct,
      buyAmount: BigNumberish,
      buyToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    usdcContractAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBtcSellOrder(
      id: BigNumberish,
      bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    acceptOrdinalSellOrder(
      id: BigNumberish,
      bitcoinAddress: BtcBobMarketPlace.BitcoinAddressStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    btcSellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeBtcSellOrder(
      id: BigNumberish,
      transaction: BitcoinTx.InfoStruct,
      proof: BitcoinTx.ProofStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    completeOrdinalSellOrder(
      id: BigNumberish,
      transaction: BitcoinTx.InfoStruct,
      proof: BitcoinTx.ProofStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ordinalSellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeBtcSellOrder(
      sellAmountBtc: BigNumberish,
      buyingToken: string,
      buyAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    placeOrdinalSellOrder(
      ordinalID: BtcBobMarketPlace.OrdinalIdStruct,
      utxo: BitcoinTx.UTXOStruct,
      buyAmount: BigNumberish,
      buyToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usdcContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
